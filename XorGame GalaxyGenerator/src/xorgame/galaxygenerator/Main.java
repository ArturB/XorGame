/* This software is licensed under XorGame 1.0 license. License does not expire.
 * Can be used for creating unlimited applications.
 * Can be distributed in binary or object form only.
 * Non-commercial use only.
 * Cannot modify source-code for any purpose (cannot create derivative works).
 */

package xorgame.galaxygenerator;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import xorgame.*;

/**
 *
 * @author Artur
 */
public class Main extends javax.swing.JFrame {
    
    boolean generationWorking = false;
    
    /**
     * Creates new form Main
     */
    public Main() {        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        solarSystemsTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        planetsTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        moonsTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        diameterTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        starSizeTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        starDeviationTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        planetNameTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        moonNameTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        databaseTextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel28 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("xorgame/galaxygenerator/Bundle"); // NOI18N
        setTitle(bundle.getString("Main.title")); // NOI18N
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.BorderLayout(20, 20));

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xorgame/galaxygenerator/Logo.png"))); // NOI18N
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);
        jLabel1.getAccessibleContext().setAccessibleName(bundle.getString("Main.jLabel1.AccessibleContext.accessibleName")); // NOI18N

        jPanel1.setLayout(new java.awt.GridLayout(13, 3, 10, 10));

        jLabel4.setText(bundle.getString("Main.jLabel4.text")); // NOI18N
        jPanel1.add(jLabel4);
        jPanel1.add(solarSystemsTextField);
        jPanel1.add(jLabel7);

        jLabel8.setText(bundle.getString("Main.jLabel8.text")); // NOI18N
        jPanel1.add(jLabel8);
        jPanel1.add(planetsTextField);
        jPanel1.add(jLabel6);

        jLabel9.setText(bundle.getString("Main.jLabel9.text")); // NOI18N
        jPanel1.add(jLabel9);
        jPanel1.add(moonsTextField);
        jPanel1.add(jLabel10);

        jLabel11.setText(bundle.getString("Main.jLabel11.text")); // NOI18N
        jPanel1.add(jLabel11);
        jPanel1.add(diameterTextField);
        jPanel1.add(jLabel12);

        jLabel13.setText(bundle.getString("Main.jLabel13.text")); // NOI18N
        jPanel1.add(jLabel13);

        starSizeTextField.setText(bundle.getString("Main.starSizeTextField.text")); // NOI18N
        jPanel1.add(starSizeTextField);
        jPanel1.add(jLabel14);

        jLabel15.setText(bundle.getString("Main.jLabel15.text")); // NOI18N
        jPanel1.add(jLabel15);

        starDeviationTextField.setText(bundle.getString("Main.starDeviationTextField.text")); // NOI18N
        jPanel1.add(starDeviationTextField);
        jPanel1.add(jLabel16);

        jLabel17.setText(bundle.getString("Main.jLabel17.text")); // NOI18N
        jPanel1.add(jLabel17);

        planetNameTextField.setText(bundle.getString("Main.planetNameTextField.text")); // NOI18N
        jPanel1.add(planetNameTextField);
        jPanel1.add(jLabel18);

        jLabel19.setText(bundle.getString("Main.jLabel19.text")); // NOI18N
        jPanel1.add(jLabel19);

        moonNameTextField.setText(bundle.getString("Main.moonNameTextField.text")); // NOI18N
        jPanel1.add(moonNameTextField);
        jPanel1.add(jLabel20);

        jLabel21.setText(bundle.getString("Main.jLabel21.text")); // NOI18N
        jPanel1.add(jLabel21);

        urlTextField.setText(bundle.getString("Main.urlTextField.text")); // NOI18N
        jPanel1.add(urlTextField);
        jPanel1.add(jLabel22);

        jLabel29.setText(bundle.getString("Main.jLabel29.text")); // NOI18N
        jPanel1.add(jLabel29);

        portTextField.setText(bundle.getString("Main.portTextField.text")); // NOI18N
        jPanel1.add(portTextField);
        jPanel1.add(jLabel5);

        jLabel23.setText(bundle.getString("Main.jLabel23.text")); // NOI18N
        jPanel1.add(jLabel23);

        databaseTextField.setText(bundle.getString("Main.databaseTextField.text")); // NOI18N
        jPanel1.add(databaseTextField);
        jPanel1.add(jLabel25);

        jLabel24.setText(bundle.getString("Main.jLabel24.text")); // NOI18N
        jPanel1.add(jLabel24);

        usernameTextField.setText(bundle.getString("Main.usernameTextField.text")); // NOI18N
        jPanel1.add(usernameTextField);
        jPanel1.add(jLabel27);

        jLabel26.setText(bundle.getString("Main.jLabel26.text")); // NOI18N
        jPanel1.add(jLabel26);

        passwordTextField.setText(bundle.getString("Main.passwordTextField.text")); // NOI18N
        jPanel1.add(passwordTextField);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(3, 0, 20, 20));

        jPanel3.setLayout(new java.awt.GridLayout(1, 3, 10, 10));
        jPanel3.add(jLabel2);

        startButton.setMnemonic('s');
        startButton.setText(bundle.getString("Main.startButton.text")); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jPanel3.add(startButton);

        jLabel3.setText(bundle.getString("Main.jLabel3.text")); // NOI18N
        jPanel3.add(jLabel3);

        jPanel2.add(jPanel3);

        progressBar.setString(bundle.getString("Main.progressBar.string")); // NOI18N
        progressBar.setStringPainted(true);
        jPanel2.add(progressBar);

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText(bundle.getString("Main.jLabel28.text")); // NOI18N
        jPanel2.add(jLabel28);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        class GalaxyGeneration implements Runnable {
            Controler main;
            GameGui gui;

            public GalaxyGeneration(Controler main, GameGui gui) {
                this.main = main;
                this.gui = gui;
            }

            @Override
            public void run() {
                generationWorking = true;

                int solar_systems  = Integer.parseInt(solarSystemsTextField.getText());
                int planets_number = Integer.parseInt(planetsTextField.getText());
                int moons_number   = Integer.parseInt(moonsTextField.getText());
                int diameter       = Integer.parseInt(diameterTextField.getText());
                int avg_star_size  = Integer.parseInt(starSizeTextField.getText());
                int star_size_var  = Integer.parseInt(starDeviationTextField.getText());
                int total_work      = solar_systems + planets_number + moons_number;
                int mean = diameter;
                int variance = diameter/4;
                String planetName = planetNameTextField.getText();
                String moonName   = moonNameTextField.getText();
                
                progressBar.setMinimum(0);
                progressBar.setMaximum(total_work);
                progressBar.setValue(0);
        
                List<StarPK> stars = new ArrayList();
        
                Random generator = new Random();
        
                //generate solar systems
                for(int i = 0; i < solar_systems; ++i) {
                    Long x, y, radius, guiIndex;
                    boolean added;
                    do {
                        x = Math.round(mean + generator.nextGaussian() * variance);
                        y = Math.round(mean + generator.nextGaussian() * variance);
                        radius = Math.round(avg_star_size + generator.nextGaussian() * star_size_var);
                        guiIndex = Math.round(Math.random() * (gui.getStarGui().size() - 1)) + 1;
                        added = !stars.contains(new StarPK(x.shortValue(), y.shortValue()));
                    } while(x < 0 || y < 0 || radius < 0 || !added);
                    stars.add(new StarPK(x.shortValue(), y.shortValue()));
                    try {
                        main.addStar(new StarPK(x.shortValue(), y.shortValue()), radius.intValue(), guiIndex.shortValue());
                    } catch (SQLException ex) {
                        javax.swing.JOptionPane.showMessageDialog(jPanel1, "Unable to connect to database! Check connection properties. ", "Error", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    progressBar.setValue(progressBar.getValue() + 1);
                    progressBar.setString(String.valueOf(Math.round(100 * progressBar.getValue() / total_work)) + "%" );
                    
                 }//generate stars
        
                //generate planets and moons
                for(int i = 0; i < planets_number; ++i) {
                    Long starIndex = Math.round(Math.random() * (solar_systems - 1));
                    Long guiIndex = Math.round(Math.random() * (gui.getPlanetGui().size() - 1)) + 1;
                    short position = 0;
                    StarPK star = stars.get(starIndex.intValue());
                    try {
                        position = main.addEmptyPlanet(star, planetName, guiIndex.shortValue());
                    } catch (SQLException ex) {
                        javax.swing.JOptionPane.showMessageDialog(jPanel1, "Unable to connect to database! Check connection properties. ", "Error", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    progressBar.setValue(progressBar.getValue() + 1);
                    progressBar.setString(String.valueOf(Math.round(100 * progressBar.getValue() / total_work)) + "%" );
                    //optionally, add the moon
                    if(i < moons_number) {
                        Long moonGuiIndex = Math.round(Math.random() * (gui.getMoonGui().size() - 1)) + 1;
                        try {
                            main.addEmptyMoon(new PlanetPK(star.getX(), star.getY(), position), moonName, moonGuiIndex.shortValue());
                        } catch (SQLException ex) {
                            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Unable to connect to database! Check connection properties. ", "Error", JOptionPane.ERROR_MESSAGE);
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        progressBar.setValue(progressBar.getValue() + 1);
                        progressBar.setString(String.valueOf(Math.round(100 * progressBar.getValue() / total_work)) + "%" );
                    }
                }//planets and moons
               
                javax.swing.JOptionPane.showMessageDialog(jPanel1, "Galaxy generation ended!");
                progressBar.setValue(0);
                progressBar.setString("");
                
                generationWorking = false;
            }//run
        }//runnable
        
        if(solarSystemsTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Solar systems number not filled!");
        else if(planetsTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Planets number not filled!");
        else if(moonsTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Moons number not filled!");
        else if(diameterTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Diameter of the galaxy not filled!");
        else if(starSizeTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Star size not filled!");
        else if(starDeviationTextField.getText().equals(""))
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Star size deviation not filled!");  
        else if(Integer.parseInt(planetsTextField.getText()) < Integer.parseInt(moonsTextField.getText()) )
                javax.swing.JOptionPane.showMessageDialog(jPanel1, "Moons number must be less than planets number!!");
        else {
        
        Thread connecting = new Thread(new Runnable() {
            @Override
            public void run() {
                
                Waiting wait = new Waiting();
                wait.setLocationRelativeTo(jPanel1);
                wait.setVisible(true);
                Controler main = null;
                GameGui gui = null;
                try {
                    main = new Controler(urlTextField.getText(), Integer.parseInt(portTextField.getText()), databaseTextField.getText(), usernameTextField.getText(), passwordTextField.getText());
                    gui = main.downloadGUI();
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(jPanel1, "Unable to connect to database! Check connection properties. ", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                wait.setVisible(false);  
                
                if(!generationWorking && main != null && gui != null) {
                    new GalaxyGeneration(main, gui).run();
                }
            }
        });
           
        connecting.start();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Main window = new Main();
            
            Properties dbconf = new Properties();
            try {
                dbconf.load(window.getClass().getResourceAsStream("/xorgame/galaxygenerator/dbconf.properties"));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(window, "Error while parsing properties file!", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            String address = dbconf.getProperty("address");
            String port = dbconf.getProperty("port");
            String dbname = dbconf.getProperty("dbname");
            String username = dbconf.getProperty("username");
            String password = dbconf.getProperty("password");
            
            window.urlTextField.setText(address);
            window.portTextField.setText(port);
            window.databaseTextField.setText(dbname);
            window.usernameTextField.setText(username);
            window.passwordTextField.setText(password);
            
            window.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JTextField diameterTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField moonNameTextField;
    private javax.swing.JTextField moonsTextField;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField planetNameTextField;
    private javax.swing.JTextField planetsTextField;
    private javax.swing.JTextField portTextField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField solarSystemsTextField;
    private javax.swing.JTextField starDeviationTextField;
    private javax.swing.JTextField starSizeTextField;
    private javax.swing.JButton startButton;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
