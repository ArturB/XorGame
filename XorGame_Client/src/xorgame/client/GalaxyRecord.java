/* This software is licensed under XorGame 1.0 license. License does not expire.
 * Can be used for creating unlimited applications.
 * Can be distributed in binary or object form only.
 * Non-commercial use only.
 * Cannot modify source-code for any purpose (cannot create derivative works).
 */
package xorgame.client;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import xorgame.*;
import java.awt.*;

/**
 * Panel with description of one planet in Galaxy panel. 
 * @author Artur
 */
public class GalaxyRecord extends javax.swing.JPanel {
    
    Main main;
    Planet planet;
    
    /**
     * Creates new form GalaxyRecord
     */
    public GalaxyRecord() {
        initComponents();
    }
    
    /**
     * Sets reference to main window of the client. Used to get session data and controler.
     * @param main_ Referense to main window of the client. 
     */
    public void setMainParent(Main main_) {
        main = main_;
    }
    
    /**
     * Sets planet coordinates, name, distance from currently selected user planet and owner.
     * @param planet_ 
     */
    public final void setContent(Planet planet_) {
        try {
            planet = planet_;
            coordinatesLabel.setText(planet.getPlanetPK().toString());
            planetNameLabel.setText(planet.getName());
            userNickLabel.setText(planet.getUser().getNick());
            if(userNickLabel.getText() == null || userNickLabel.getText().isEmpty()) {
                userNickLabel.setText("no owner");
                sendMessageButton.setEnabled(false); 
            }
            long distance = Math.round(main.getMainControler().planetDistance(planet.getPlanetPK(), main.getSelectedPlanet().getPlanetPK()));
            distanceLabel.setText(Long.toString(distance));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(main, "Error while connecting to game server!", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(GalaxyRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Returns coordinates of shown planet. 
     * @return Coordinates of shown planet. 
     */
    public final PlanetPK getPlanetPK() {
        return planet.getPlanetPK();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coordinatesLabel = new javax.swing.JLabel();
        planetNameLabel = new javax.swing.JLabel();
        userNickLabel = new javax.swing.JLabel();
        distanceLabel = new javax.swing.JLabel();
        sendFleetButton = new javax.swing.JButton();
        sendMessageButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 25));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        setLayout(new java.awt.GridLayout(1, 7, 30, 0));

        coordinatesLabel.setForeground(new java.awt.Color(255, 255, 255));
        coordinatesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coordinatesLabel.setText("...");
        add(coordinatesLabel);

        planetNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        planetNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        planetNameLabel.setText("...");
        add(planetNameLabel);

        userNickLabel.setForeground(new java.awt.Color(255, 255, 255));
        userNickLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userNickLabel.setText("...");
        add(userNickLabel);

        distanceLabel.setForeground(new java.awt.Color(255, 255, 255));
        distanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        distanceLabel.setText("...");
        add(distanceLabel);

        sendFleetButton.setBackground(new java.awt.Color(0, 102, 0));
        sendFleetButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        sendFleetButton.setForeground(new java.awt.Color(255, 255, 255));
        sendFleetButton.setText("SEND FLEET");
        sendFleetButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        sendFleetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFleetButtonActionPerformed(evt);
            }
        });
        add(sendFleetButton);

        sendMessageButton.setBackground(new java.awt.Color(0, 102, 0));
        sendMessageButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        sendMessageButton.setForeground(new java.awt.Color(255, 255, 255));
        sendMessageButton.setText("SEND MESSAGE");
        sendMessageButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });
        add(sendMessageButton);

        filterButton.setBackground(new java.awt.Color(0, 102, 0));
        filterButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        filterButton.setForeground(new java.awt.Color(255, 255, 255));
        filterButton.setText("Filter to this SS");
        filterButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        add(filterButton);
    }// </editor-fold>//GEN-END:initComponents

    private void sendFleetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFleetButtonActionPerformed
        main.getFleet().setStartCoordinates();
        main.getFleet().setDestCoordinates(planet.getPlanetPK()); 
        main.getFleet().setContent();
        CardLayout layout = (CardLayout)main.getWorkPanel().getLayout();
        layout.show(main.getWorkPanel(), "FleetCard");
    }//GEN-LAST:event_sendFleetButtonActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        main.getGalaxy().getxFilterLabel().setText(Short.toString(planet.getPlanetPK().getX()));
        main.getGalaxy().getyFilterLabel().setText(Short.toString(planet.getPlanetPK().getY()));
        main.getGalaxy().filter();
    }//GEN-LAST:event_filterButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        main.getNewMessage().setTo(planet.getUser().getNick()); 
        main.getNewMessage().setFrom(main.getUser().getNick()); 
        CardLayout layout = (CardLayout)main.getWorkPanel().getLayout();
        layout.show(main.getWorkPanel(), "NewMessageCard"); 
    }//GEN-LAST:event_sendMessageButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coordinatesLabel;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel planetNameLabel;
    private javax.swing.JButton sendFleetButton;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JLabel userNickLabel;
    // End of variables declaration//GEN-END:variables
}
